2022-01-29 Study ______________________________________________________________________________________________________________

리액트는 중괄호의 활용이 무궁무진하다
리액트의 가장 큰 장점은 데이터 바인딩이 아주 쉬워진다
(자바스크립트에서 여러 줄을 반복해야 하는 것을 let temp = ""로 받아오기만 하면 쉽게 해결할 수 있다)
그 외에 함수도 가능하며, 중괄호 안에 css처럼 디자인을 집어넣어도 적용이 된다.

2022-01-30 Study ______________________________________________________________________________________________________________

- state는 리액트의 데이터 저장공간이라고 보면 된다
- 평범한 let을 사용하지 않고 state를 사용하는 이유는
웹이 App처럼 동작하게 만들고 싶어서이다. (state는 변경되면 HTML이 자동으로 재렌더링이 된다) **중요
- 평범한 let같은 경우는 새로고침을 해야 재렌더링이 된다 하지만 useState는 새로고침없이 HTML에 렌더링됨
- 자주 바뀌는, 중요한 데이터들을 변수 말고 state로 저장해서 사용하면 된다
- useState를 사용할때는 이렇게 2개의 array가 존재해야 한다.
ex) let [tempData, tempDataChangeFunc] = useState(temp);
- 이 useState안에는 문자, 숫자, array, object  다 저장이 가능하다

2022-01-30 Study ______________________________________________________________________________________________________________

-React에서는 배열에 있는 데이터를 변경할 때 전체 배열을 받아와서 변경을 하고 다시 배열을 입력해줘야함
(하나만 받아와서 변경을 할 시 이상하게 변함)
* 전체 배열을 받아오는 방식은: let temp = [...배열];

- onclick안에는 함수만 들어갈 수 있다 
	사용법 onClick={ () => {클릭될 때 실행할 함수} }
	또는 onClick={ () => {실행할 내용} }식으로 함수를 직접 하나 그 자리에서 만들기도 된다 

-App.js 안에서는 하나의 div로만 감싸고 있어야 한다. (두가지 이상으로 감싸질 경우에는 에러가 발생한다)
-eslint warning이 뜨는게 거슬릴시에는 /* eslint-disable */ 을 입력해두면 warning이 더이상 뜨지 않는다

2022-02-01 Study ______________________________________________________________________________________________________________

- component 만드는 법
<div/> 사용처럼 원하는 제목을 대문자로 ex) <Temp/> 처럼 나타내면 된다.
ex 2)
  function Modal() {
    return (
      <div className="modal">
        <h2>제목</h2>
        <p>날짜</p>
        <p>상세내용</p>
      </div>
    );
  }

- component의 유의사항은:
      1.이름은 반드시 첫문자가 대문자일것 
      2.return()안에 있는건 태그 하나로 묶어야한다
- component의 단점:
      1. state를 쓸 때 많이 복잡해짐 (상위 component에서 만든 state 쓰려면 props 문법을 이용해야함)

2022-02-03 Study ______________________________________________________________________________________________________________

- 삼항연산자---------------------------------------------------------------------------------------------------------------------
	jsx안에서는 if문을 사용 못하므로 삼항연산자 라는 연산을 사용해야 한다.
	ex) 조건식 ? 참일 때 실행할 코드 : 거짓일 때 실행할 코드
이것을 사용해 modal 함수를 끄고 키는 함수를 일반적인 자바스크립트를 사용하는 것 보다 쉽게 쓸 수 있다
ex) modal == true ? <Modal></Modal> : null (여기서 null은 텅 빈 html을 얘기한다)

- jsx 안에서 반복문 사용법-------------------------------------------------------------------------------------------------------

jsx 안에서는 for문을 사용할 수 없어서 **map**을 사용한다.
함수 사용법은 : 
ex) 
	{ array.map ( function (PARAMETER)  { return (반복할 html + parameter) } ) } 이다
(array에 있는 element들을 parameter로 옮겨 함수의 끝까지 반복하면서 parameter에 있는것들을 사용한다)

그 외에 jsx 밖에서는 for문을 사용할 수 있으므로 function을 만들어 사용하는 법이 있다.
ex ) function App () {

  function 반복된UI(){
    var 어레이 = [];
    for (var i = 0; i < 3; i++) {
      어레이.push(<div>안녕</div>)
    }
    return 어레이
  }
  return (
    <div>
      HTML 잔뜩있는 곳
      
      { 반복된UI() }
    </div>
  )
}
아래 방법도 있지만 되도록이면 map을 사용하면서 익숙하게 만들어 놓는게 좋을 것 같다.